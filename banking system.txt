
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bankingsystem` DEFAULT CHARACTER SET utf8 ;
USE `bankingsystem` ;

-- -----------------------------------------------------
-- Table `bankingsystem`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`customer` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(255) NULL,
  `last_name` VARCHAR(255) NULL,
  `dob` DATE NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankingsystem`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`account` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `account_type` VARCHAR(45) NULL,
  `balance` INT NULL,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_account_customer_idx` (`customer_id` ASC),
  CONSTRAINT `fk_account_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankingsystem`.`customer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankingsystem`.`transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`transaction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `transaction_type` VARCHAR(45) NULL,
  `amount` INT NULL,
  `transaction_date` DATE NULL,
  `account_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_transaction_account1_idx` (`account_id` ASC),
  CONSTRAINT `fk_transaction_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankingsystem`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;






USE `bankingsystem` ;

-- -----------------------------------------------------
-- Table `bankingsystem`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`customer` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(255) NULL,
  `last_name` VARCHAR(255) NULL,
  `dob` DATE NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankingsystem`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`account` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `account_type` VARCHAR(45) NULL,
  `balance` INT NULL,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_account_customer_idx` (`customer_id` ASC) ,
  CONSTRAINT `fk_account_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankingsystem`.`customer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankingsystem`.`transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`transaction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `transaction_type` VARCHAR(45) NULL,
  `amount` INT NULL,
  `transaction_date` DATE NULL,
  `account_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_transaction_account1_idx` (`account_id` ASC) ,
  CONSTRAINT `fk_transaction_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `bankingsystem`.`account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
use bankingsystem;
insert into customer(first_name,last_name,dob) values 
('harry','potter','2002-03-21'),
('ronald','weasley','2001-02-10'),
('hermione','granger','2002-11-15');
insert into account(account_type,balance,customer_id) values 
('savings',50000,1) ,
('current',120000,2) ,
('zero_balance',100000,3),
('current',150000,1) ,
('savings',30000,3);
insert into transaction(transaction_type,amount,transaction_date,account_id) 
values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);
-- task2

-- 1. Write a SQL query to retrieve the name, account type and dob of all customers. 
select cr.first_name,a.account_type,cr.dob
from customer cr join account a on a.customer_id=cr.id;
/*
output
# first_name, account_type, dob
harry, savings, 2002-03-21
ronald, current, 2001-02-10
hermione, zero_balance, 2002-11-15
harry, current, 2002-03-21
hermione, savings, 2002-11-15
harry, savings, 2002-03-21
ronald, current, 2001-02-10
hermione, zero_balance, 2002-11-15
harry, current, 2002-03-21
hermione, savings, 2002-11-15
harry, savings, 2002-03-21
ronald, current, 2001-02-10
hermione, zero_balance, 2002-11-15
harry, current, 2002-03-21
hermione, savings, 2002-11-15
*/
 /*# first_name, last_name, account_type, email
-- 2. Write a SQL query to list all transaction corresponding customer.
SELECT c.first_name, c.last_name, t.transaction_type, t.amount, t.transaction_date
FROM customer c
JOIN account a ON c.id = a.customer_id
JOIN transaction t ON a.id = t.account_id;
/*
# first_name, last_name, transaction_type, amount, transaction_date
harry, potter, deposit, 10000, 2024-02-01
harry, potter, withdrawal, 5000, 2024-02-02
ronald, weasley, deposit, 20000, 2024-02-02
hermione, granger, withdrawal, 8000, 2024-02-02
harry, potter, transfer, 20000, 2024-02-01
hermione, granger, transfer, 7000, 2024-02-05
harry, potter, deposit, 10000, 2024-02-01
harry, potter, withdrawal, 5000, 2024-02-02
ronald, weasley, deposit, 20000, 2024-02-02
hermione, granger, withdrawal, 8000, 2024-02-02
harry, potter, transfer, 20000, 2024-02-01
hermione, granger, transfer, 7000, 2024-02-05
*/

-- 3. Write a SQL query to increase the balance of a specific account by a certain amount.
update account
set balance = balance + 10000
where id = 1;
-- 4. Write a SQL query to Combine first and last names of customers as a full_name.
select concat(first_name, ' ', last_name) as full_name
from customer;
/* # full_name
harry potter
ronald weasley
hermione granger
harry potter
ronald weasley
hermione granger
*/
-- 5. Write a SQL query to remove accounts with a balance of zero where the account type is savings.
delete from account
where balance = 0 and account_type = 'savings';

-- 7. Write a SQL query to Get the account balance for a specific account.
select balance
from account
where id = 1;
-- # balance 70000

-- 8. Write a SQL query to List all current accounts with a balance greater than $1,000.
select *
from account
where  account_type = 'current' and balance > 1000;
/* 
# id, account_type, balance, customer_id
2, current, 120000, 2
4, current, 150000, 1
7, current, 120000, 2
9, current, 150000, 1
*/
-- 9. Write a SQL query to Retrieve all transactions for a specific account.
select t.*
from transaction t
join account a on t.account_id = a.id
where a.id = 1;
/*
# id, transaction_type, amount, transaction_date, account_id
1, deposit, 10000, 2024-02-01, 1
2, withdrawal, 5000, 2024-02-02, 1
7, deposit, 10000, 2024-02-01, 1
8, withdrawal, 5000, 2024-02-02, 1

/*
-- 11. Write a SQL query to Identify accounts where the balance is less than a specified overdraft limit.
SELECT *
FROM account
WHERE balance < 10000;


-- Task 3: Aggregate functions, Having, Order By, GroupBy and Joins

-- 1
select cr.first_name,cr.last_name, avg(a.balance) as average_bal
from customer cr join account a on cr.id=a.customer_id
group by cr.id;
/*
harry	potter	105000.0000
ronald	weasley	120000.0000
hermione	granger	65000.0000
*/



-- Write a SQL query to retrieve the top 10 highest account balances.

select *
from account
order by balance desc
limit 10;
/*
# id, account_type, balance, customer_id
4, current, 150000, 1
9, current, 150000, 1
2, current, 120000, 2
7, current, 120000, 2
3, zero_balance, 100000, 3
8, zero_balance, 100000, 3
1, savings, 70000, 1
6, savings, 50000, 1
5, savings, 30000, 3
10, savings, 30000, 3
*/
-- Write a SQL query to calculate the total deposits for all customers on a specific date.
 select  transaction_type,sum(amount) as net_deposits
from transaction 
where transaction_type = 'transfer' and transaction_date = '2024-02-01'
group by transaction_type;
-- transfer	60000

-- Write a SQL query to retrieve transaction details along with the account type.
select t.*, a.account_type
from transaction t join account a on t.account_id = a.id;
/*
# id, transaction_type, amount, transaction_date, account_id, account_type
9, deposit, 20000, 2024-02-02, 2, current
4, withdrawal, 8000, 2024-02-02, 3, zero_balance
10, withdrawal, 8000, 2024-02-02, 3, zero_balance
5, transfer, 20000, 2024-02-01, 4, current
11, transfer, 20000, 2024-02-01, 4, current
6, transfer, 7000, 2024-02-05, 5, savings
12, transfer, 7000, 2024-02-05, 5, savings
*/
-- Write a SQL query to get a list of customers along with their account details.

select *
from customer cr join account a on cr.id=a.customer_id;

/*
1	harry	potter	2002-03-21	1	savings	80000	1
2	ronald	weasley	2001-02-10	2	current	120000	2
3	hermione	granger	2002-11-15	3	zero_balance	100000	3
1	harry	potter	2002-03-21	4	current	150000	1
3	hermione	granger	2002-11-15	5	savings	30000	3
1	harry	potter	2002-03-21	6	savings	50000	1
2	ronald	weasley	2001-02-10	7	current	120000	2
3	hermione	granger	2002-11-15	8	zero_balance	100000	3
1	harry	potter	2002-03-21	9	current	150000	1
3	hermione	granger	2002-11-15	10	savings	30000	3
1	harry	potter	2002-03-21	11	savings	50000	1
2	ronald	weasley	2001-02-10	12	current	120000	2
3	hermione	granger	2002-11-15	13	zero_balance	100000	3
1	harry	potter	2002-03-21	14	current	150000	1
3	hermione	granger	2002-11-15	15	savings	30000	3
*/
-- Write a SQL query to retrieve transaction details along with customer information for a specific account.
select cr.first_name,t.*
from  customer cr join account a on cr.id = a.customer_id
join transaction t on a.id = t.account_id
where a.id = 3;
/*
# first_name, id, transaction_type, amount, transaction_date, account_id
hermione, 4, withdrawal, 8000, 2024-02-02, 3
hermione, 10, withdrawal, 8000, 2024-02-02, 3
hermione, 16, withdrawal, 8000, 2024-02-02, 3

*/
-- Write a SQL query to identify customers who have more than one account.

select cr.first_name, cr.dob
from customer cr join account a on cr.id=a.customer_id
group by cr.id
having count(cr.id)>1;

/*
# first_name, dob
harry, 2002-03-21
ronald, 2001-02-10
hermione, 2002-11-15

*/
-
-- Write a SQL query to calculate the average daily balance for each account over a specified period.

select a.*,avg(a.balance) as avg_daily_bal
from account a join transaction t on a.id=t.account_id
where t.transaction_date between '2024-02-01' and '2024-02-04'
group by a.id;

/*
1	savings	80000	1	80000.0000
2	current	120000	2	120000.0000
3	zero_balance	100000	3	100000.0000
4	current	150000	1	150000.0000
*/
-- Calculate the total balance for each account type.


SELECT account_type, SUM(balance) AS total_balance
FROM account
GROUP BY account_type;
/*
# account_type, total_balance
savings, 180000
current, 540000
zero_balance, 200000
*/
-- Identify accounts with the highest number of transactions in descending order.

select a.*, COUNT(t.id) as transaction_no
from account a
join transaction t on a.id = t.account_id
group by a.id
order by transaction_no desc;
/*
# id, account_type, balance, customer_id, transaction_no
1, savings, 80000, 1, 6
2, current, 120000, 2, 3
3, zero_balance, 100000, 3, 3
4, current, 150000, 1, 3
5, savings, 30000, 3, 3
*/

-- List customers with high aggregate account balances, along with their account types.
select cr.first_name, a.account_type, sum(a.balance) as total_bal
from customer cr join account a on cr.id=a.customer_id
group by cr.id
order by total_bal desc;


-- task 4
-- 1
select cr.first_name,max(a.balance)
from customer cr join account a ON cr.id=a.customer_id
group by cr.id 
limit 1;


/*
output
# first_name, last_name, balance
harry, potter, 150000
*/


-- 2
select cr.first_name,avg(a.balance) as avg_balance
from customer cr join account a on cr.id=a.customer_id
group by cr.id;
/*
# first_name, avg_balance
harry, 105000.0000
ronald, 120000.0000
hermione, 65000.0000
*/
-- 3
select a.id,a.balance
from account a join transaction t on a.id=t.account_id
group by t.account_id
having avg(t.amount)>(select avg(amount) from transaction);
/*
# id, balance
2, 120000
4, 150000
*/
-- 4
select cr.*
from customer cr
where id not in (select cr.id from customer cr 
join account a on cr.id=a.customer_id 
join transaction t on a.id=t.account_id);
/*
'5', 'ronald', 'weasley', '2001-02-10'
'6', 'hermione', 'granger', '2002-11-15'
'7', 'harry', 'potter', '2002-03-21'
'8', 'ronald', 'weasley', '2001-02-10'
'9', 'hermione', 'granger', '2002-11-15'
*/
-- 5
select *
from account  
where account.id not in(select a.id
from account a join transaction t on a.id=t.account_id);

-- 6
select t.*,a.balance
from account a join transaction t on a.id=t.account_id
order by a.balance desc
limit 1;
/*
5	transfer	20000	2024-02-01	4	150000
*/
-- 7
select cr.*
from customer cr join account a on cr.id=a.customer_id
group by cr.id;

/*
# id, first_name, last_name, dob
1, harry, potter, 2002-03-21
2, ronald, weasley, 2001-02-10
3, hermione, granger, 2002-11-15

*/
-- 8
select account_type, count(account_type) * 100.0 / (select count(id) from account) as percentage
from account
group by account_type;



/*

# account_type, percentage
savings, 40.00000
current, 40.00000
zero_balance, 20.00000
*/

